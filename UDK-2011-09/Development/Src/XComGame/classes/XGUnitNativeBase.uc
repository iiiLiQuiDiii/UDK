/*******************************************************************************
 * XGUnitNativeBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class XGUnitNativeBase extends Actor
    hidecategories(Navigation)
    native(Unit)
    nativereplication
    config(GameCore)
    notplaceable;

  var bool m_bOffTheBattlefield;
  
  native simulated function bool IsCriticallyWounded();
native simulated event Vector GetLocation();

  simulated function XComUnitPawn GetPawn();
  native simulated function int GetSightRadius();

// Export UXGUnitNativeBase::execClearAbilities(FFrame&, void* const)
native simulated function ClearAbilities(optional bool bForLocalUseOnly);

// Export UXGUnitNativeBase::execIsClosed(FFrame&, void* const)
native simulated function bool IsClosed();

// Export UXGUnitNativeBase::execIsHardened(FFrame&, void* const)
native simulated function bool IsHardened();

// Export UXGUnitNativeBase::execIsDead(FFrame&, void* const)
native simulated function bool IsDead();

// Export UXGUnitNativeBase::execAreDyingActionsInQueue(FFrame&, void* const)
native simulated function bool AreDyingActionsInQueue();

// Export UXGUnitNativeBase::execIsMovingNative(FFrame&, void* const)
native simulated function bool IsMovingNative();

// Export UXGUnitNativeBase::execKillerInstinctPerkActive(FFrame&, void* const)
native simulated function bool KillerInstinctPerkActive();

// Export UXGUnitNativeBase::execIsCloseRange(FFrame&, void* const)
native simulated function bool IsCloseRange(Vector vLocation, optional bool bRelaxed, optional float fRangeMultiplier);

// Export UXGUnitNativeBase::execIsInCloseCombatSpecialistRange(FFrame&, void* const)
native simulated function bool IsInCloseCombatSpecialistRange(Vector vLoc);

// Export UXGUnitNativeBase::execIsInRegenPheromoneRange(FFrame&, void* const)
native simulated function bool IsInRegenPheromoneRange(Vector vLoc);

// Export UXGUnitNativeBase::execAddBonus(FFrame&, void* const)
native function AddBonus(int iBonus);

// Export UXGUnitNativeBase::execRemoveBonus(FFrame&, void* const)
native function RemoveBonus(int iBonus);

// Export UXGUnitNativeBase::execHasHeightAdvantageOver(FFrame&, void* const)
native simulated function bool HasHeightAdvantageOver(XGUnit kTarget);

// Export UXGUnitNativeBase::execRemoveAllContextBuffs(FFrame&, void* const)
native function RemoveAllContextBuffs();

// Export UXGUnitNativeBase::execRemovePassiveBuffs(FFrame&, void* const)
native function RemovePassiveBuffs();

// Export UXGUnitNativeBase::execRemoveAllBuffs(FFrame&, void* const)
native function RemoveAllBuffs();

// Export UXGUnitNativeBase::execWillTestChance(FFrame&, void* const)
native simulated function int WillTestChance(int iWillTest, int iMyMods, bool bUseArmorBonus, bool bUseMindShieldBonus, optional XGUnit kVersus, optional int iEvenStatsChanceToFail, optional out int iFinalWill);
// Export UXGUnitNativeBase::execIsAffectedByAbility(FFrame&, void* const)
native simulated function bool IsAffectedByAbility(int iAbility);

// Export UXGUnitNativeBase::execIsInTelekineticField(FFrame&, void* const)
native simulated function bool IsInTelekineticField();

// Export UXGUnitNativeBase::execIsPoisoned(FFrame&, void* const)
native simulated function bool IsPoisoned();

// Export UXGUnitNativeBase::execCanBeHealedWithMedikit(FFrame&, void* const)
native simulated function bool CanBeHealedWithMedikit();

// Export UXGUnitNativeBase::execIsApplyingAbility(FFrame&, void* const)
native simulated function bool IsApplyingAbility(int iAbility);

// Export UXGUnitNativeBase::execAddPenalty(FFrame&, void* const)
native function AddPenalty(int iPenalty);

// Export UXGUnitNativeBase::execRemovePenalty(FFrame&, void* const)
native function RemovePenalty(int iPenalty);

// Export UXGUnitNativeBase::execAddPassive(FFrame&, void* const)
native function AddPassive(int iPassive);

// Export UXGUnitNativeBase::execRemovePassive(FFrame&, void* const)
native function RemovePassive(int iPassive);

// Export UXGUnitNativeBase::execUpdateCoverBonuses(FFrame&, void* const)
native function UpdateCoverBonuses(XGUnitNativeBase kTarget);

// Export UXGUnitNativeBase::execHasPassive(FFrame&, void* const)
native simulated function bool HasPassive(int iBuff);

// Export UXGUnitNativeBase::execHasBonus(FFrame&, void* const)
native simulated function bool HasBonus(int iBuff);

// Export UXGUnitNativeBase::execHasPenalty(FFrame&, void* const)
native simulated function bool HasPenalty(int iBuff);

// Export UXGUnitNativeBase::execCanUseCover(FFrame&, void* const)
native simulated function bool CanUseCover(optional bool bIgnoreFlight);

// Export UXGUnitNativeBase::execSetCoverValue(FFrame&, void* const)
native simulated function SetCoverValue(int iNewCoverValue);

// Export UXGUnitNativeBase::execHasAirEvadeBonus(FFrame&, void* const)
native function bool HasAirEvadeBonus();

// Export UXGUnitNativeBase::execHasNoCoverBonus(FFrame&, void* const)
native function bool HasNoCoverBonus();

// Export UXGUnitNativeBase::execGetTacticalSenseCoverBonus(FFrame&, void* const)
native simulated function int GetTacticalSenseCoverBonus();

// Export UXGUnitNativeBase::execGetLowProfileCoverBonus(FFrame&, void* const)
native simulated function int GetLowProfileCoverBonus();
