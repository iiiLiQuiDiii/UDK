/*******************************************************************************
 * SeqAct_RemoveActor generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SeqAct_SetCover extends SequenceAction
    hidecategories(Object)
    forcescriptorder(true);


enum ENewBoolValue
{
    UNCHANGED,
    SET_FALSE,
	SET_TRUE,
    ENewValue_MAX
};

enum ENewCoverForceFlag
{
	UNCHANGED,
    SET_DEFAULT,
    SET_HIGH,
    SET_LOW,
    ENewCoverForceFlag_MAX
};

var() ENewCoverForceFlag CoverForceFlag;
var() ENewCoverForceFlag CoverIgnoreFlag;

var() ENewBoolValue bAlwaysConsiderForCover;
var() ENewBoolValue bIgnoreForCover;
var() ENewBoolValue bCanClimbOver;
var() ENewBoolValue bCanClimbOnto;
var() ENewBoolValue bCanStepUpOn;
var() ENewBoolValue bBlockUnitVisibility;
var() ENewBoolValue bPathColliding;

var() Actor Target;

event Activated()
{
	if ( Target.IsA( 'XComLevelActor') )
	{
		if (bBlockUnitVisibility 	!= UNCHANGED)		XComLevelActor(Target).VisibilityBlockingData.bBlockUnitVisibility  = bBlockUnitVisibility		==SET_TRUE;
		if (bAlwaysConsiderForCover != UNCHANGED)		XComLevelActor(Target).bAlwaysConsiderForCover 						= bAlwaysConsiderForCover	==SET_TRUE;
		if (bIgnoreForCover 		!= UNCHANGED) 		XComLevelActor(Target).bIgnoreForCover								= bIgnoreForCover			==SET_TRUE;
		if (bCanClimbOnto 			!= UNCHANGED) 		XComLevelActor(Target).bCanClimbOver 								= bCanClimbOver				==SET_TRUE;
		if (bCanClimbOnto 			!= UNCHANGED) 		XComLevelActor(Target).bCanClimbOnto 								= bCanClimbOnto				==SET_TRUE;
		if (bPathColliding 			!= UNCHANGED) 		XComLevelActor(Target).bPathColliding 								= bPathColliding			==SET_TRUE;
	
		switch(CoverForceFlag)
		{
			case UNCHANGED: 																break;
			case SET_DEFAULT: 	XComLevelActor(Target).CoverForceFlag = CoverForce_Default; break;
			case SET_LOW:		XComLevelActor(Target).CoverForceFlag = CoverForce_Low; 	break;
			case SET_HIGH: 		XComLevelActor(Target).CoverForceFlag = CoverForce_High;	break;
		}
		
		switch(CoverIgnoreFlag)
		{
			case UNCHANGED: 																 break;
			case SET_DEFAULT: 	XComLevelActor(Target).CoverIgnoreFlag = CoverForce_Default; break;
			case SET_LOW:		XComLevelActor(Target).CoverIgnoreFlag = CoverForce_Low; 	 break;
			case SET_HIGH: 		XComLevelActor(Target).CoverIgnoreFlag = CoverForce_High;	 break;
		}
	}
	else if (Target.IsA('XComFracLevelActor'))
	{
		if (bBlockUnitVisibility 	!= UNCHANGED)		XComFracLevelActor(Target).VisibilityBlockingData.bBlockUnitVisibility  = bBlockUnitVisibility		==SET_TRUE;
		if (bAlwaysConsiderForCover != UNCHANGED)		XComFracLevelActor(Target).bAlwaysConsiderForCover 						= bAlwaysConsiderForCover	==SET_TRUE;
		if (bIgnoreForCover 		!= UNCHANGED) 		XComFracLevelActor(Target).bIgnoreForCover								= bIgnoreForCover			==SET_TRUE;
		if (bCanClimbOnto 			!= UNCHANGED) 		XComFracLevelActor(Target).bCanClimbOver 								= bCanClimbOver				==SET_TRUE;
		if (bCanClimbOnto 			!= UNCHANGED) 		XComFracLevelActor(Target).bCanClimbOnto 								= bCanClimbOnto				==SET_TRUE;
		if (bPathColliding 			!= UNCHANGED) 		XComFracLevelActor(Target).bPathColliding 								= bPathColliding			==SET_TRUE;
	
		switch(CoverForceFlag)
		{
			case UNCHANGED: 																	break;
			case SET_DEFAULT: 	XComFracLevelActor(Target).CoverForceFlag = CoverForce_Default; break;
			case SET_LOW:		XComFracLevelActor(Target).CoverForceFlag = CoverForce_Low; 	break;
			case SET_HIGH: 		XComFracLevelActor(Target).CoverForceFlag = CoverForce_High;	break;
		}
		
		switch(CoverIgnoreFlag)
		{
			case UNCHANGED: 																	 break;
			case SET_DEFAULT: 	XComFracLevelActor(Target).CoverIgnoreFlag = CoverForce_Default; break;
			case SET_LOW:		XComFracLevelActor(Target).CoverIgnoreFlag = CoverForce_Low; 	 break;
			case SET_HIGH: 		XComFracLevelActor(Target).CoverIgnoreFlag = CoverForce_High;	 break;
		}
	}
	
	if (bCanStepUpOn != UNCHANGED) 		Target.bCanStepUpOn = bCanStepUpOn==SET_TRUE;
	
	ActivateOutputLink(0);
}

defaultproperties
{
    bCallHandler=false
	VariableLinks(0)=(ExpectedType=Class'Engine.SeqVar_Object',LinkDesc="Target",PropertyName=Target)
    ObjName="Set Cover"
}