/*******************************************************************************
 * SeqAct_RemoveActor generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SeqAct_AddDestructibleActorEvent extends SequenceAction
    hidecategories(Object)
    forcescriptorder(true)
	;

enum EActorEventTrigger
{
    Damaged,
    Destroyed,
    EActorEventTrigger_MAX
};

enum EActorEventType
{
	DamageOverTime,
    DestroyActor,
    Hide,
	PlayEffectCue,
	PlaySoundCue,
	RadialDamage,
	RemoteEvent,
	SwapMaterial,
	SwapStaticMesh,
	SwapSkeletalMesh,
	ToggleEffect,
	ToggleLight,
	ToggleSoundCue,
	
    EActorEventType_MAX
};
var() EActorEventType    EventType;
var() EActorEventTrigger EventTrigger;
var() bool bEnabled;

var(DestructibleActorEvent) float Time;
var(DestructibleActorEvent) int Turns;

var() XComDestructibleActor Target;


var(PlaySoundCue) SoundCue Sound;

var(PlayEffectCue) export editinline EffectCue EffectCue;
var(PlayEffectCue) EmitterInstanceParameterSet InstanceParameters;
var(PlayEffectCue) Rotator RotationAdjustment;
var(PlayEffectCue) Vector PositionAdjustment;
var(PlayEffectCue) Vector Scale;
var(PlayEffectCue) XComDestructibleActorImpactDefinition WeaponImpactDefinitions;

var(RadialDamage) float DamageRadius;
var(RadialDamage) float DamageAmount;
var(RadialDamage) class<DamageType> DamageType;
var(RadialDamage) float Momentum;
var(RadialDamage) Vector Offset;
var(RadialDamage) bool bLocalSpace;

var(DamageOverTime) int DamageOverTime_DamageAmount;
var(DamageOverTime) class<XComDamageType> DamageOverTime_DamageType;

var(RemoteEvent) name RemoteEvent;

var(SwapStaticMesh) export editinline StaticMeshCue MeshCue;
var(SwapStaticMesh) bool bDisableCollision;
var(SwapStaticMesh) bool bRemoveLightmap;
var(SwapStaticMesh) XComDestructibleActor_Action_SwapStaticMesh.EMaterialOverrideMode MaterialOverrideMode;

var(DestroyActor) Actor TargetActor;

var(ToggleEffect) Emitter Emitter;

event Activated()
{
	local DestructibleActorEvent devent;
	local XComDestructibleActor_Action Action;
	
	switch(EventType)
	{
		case Hide:
		
			Action = new(Target) class'XComDestructibleActor_Action_Hide';
			break;
			
		case PlaySoundCue:
			Action = new(Target) class'XComDestructibleActor_Action_PlaySoundCue';
			XComDestructibleActor_Action_PlaySoundCue(Action).Sound = Sound;
			break;
			
		case PlayEffectCue:
			Action = new(Target) class'XComDestructibleActor_Action_PlayEffectCue';
			XComDestructibleActor_Action_PlayEffectCue(Action).EffectCue = EffectCue;
			XComDestructibleActor_Action_PlayEffectCue(Action).InstanceParameters = InstanceParameters;
			XComDestructibleActor_Action_PlayEffectCue(Action).RotationAdjustment = RotationAdjustment;
			XComDestructibleActor_Action_PlayEffectCue(Action).PositionAdjustment = PositionAdjustment;
			XComDestructibleActor_Action_PlayEffectCue(Action).Scale = Scale;
			XComDestructibleActor_Action_PlayEffectCue(Action).WeaponImpactDefinitions = WeaponImpactDefinitions;
			break;
		
		case RadialDamage:
			Action = new(Target) class'XComDestructibleActor_Action_RadialDamage';
			XComDestructibleActor_Action_RadialDamage(Action).DamageRadius = DamageRadius;
			XComDestructibleActor_Action_RadialDamage(Action).DamageAmount = DamageAmount;
			XComDestructibleActor_Action_RadialDamage(Action).DamageType = DamageType;
			XComDestructibleActor_Action_RadialDamage(Action).Momentum = Momentum;
			XComDestructibleActor_Action_RadialDamage(Action).Offset = Offset;
			XComDestructibleActor_Action_RadialDamage(Action).bLocalSpace = bLocalSpace;
			break;
		
		case DamageOverTime:
			Action = new(Target) class'XComDestructibleActor_Action_DamageOverTime';
			XComDestructibleActor_Action_DamageOverTime(Action).DamageAmount = DamageOverTime_DamageAmount;
			XComDestructibleActor_Action_DamageOverTime(Action).DamageType = DamageOverTime_DamageType;
			break;
			
		case RemoteEvent:
			Action = new(Target) class'XComDestructibleActor_Action_RemoteEvent';
			XComDestructibleActor_Action_RemoteEvent(Action).RemoteEvent = RemoteEvent;
			break;
			
		case SwapStaticMesh:
			Action = new(Target) class'XComDestructibleActor_Action_SwapStaticMesh';
			XComDestructibleActor_Action_SwapStaticMesh(Action).MeshCue = MeshCue;
			XComDestructibleActor_Action_SwapStaticMesh(Action).bDisableCollision = bDisableCollision;
			XComDestructibleActor_Action_SwapStaticMesh(Action).bRemoveLightmap = bRemoveLightmap;
			XComDestructibleActor_Action_SwapStaticMesh(Action).MaterialOverrideMode = MaterialOverrideMode;
			break;
		case DestroyActor:
			Action = new(Target) class'XComDestructibleActor_Action_DestroyActor';
			XComDestructibleActor_Action_DestroyActor(Action).TargetActor = TargetActor;
			break;
		case ToggleEffect:
			Action = new(Target) class'XComDestructibleActor_Action_ToggleEffect';
			XComDestructibleActor_Action_ToggleEffect(Action).Emitter = Emitter;
			break;	
			
	}
	
	
	devent.Time  = Time;
	devent.Turns = Turns;
	devent.Action = Action;
	devent.Action.bEnabled = bEnabled;
	
	if (EventTrigger == Damaged) 
		Target.DamagedEvents.AddItem(devent);
	else
		Target.DestroyedEvents.AddItem(devent);
	
	ActivateOutputLink(0);
}

defaultproperties
{
    bCallHandler=false
	bEnabled=true
	InputLinks(0)=(LinkDesc="In")
    OutputLinks(0)=(LinkDesc="Out")
	VariableLinks(0)=(ExpectedType=Class'Engine.SeqVar_Object',LinkDesc="Actor",PropertyName=Target)
    ObjName="Add Destructible Actor Event"
}