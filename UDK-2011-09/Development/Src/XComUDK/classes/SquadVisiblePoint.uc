/*******************************************************************************
 * XComSquadVisiblePoint generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class SquadVisiblePoint extends Actor
    hidecategories(Navigation)
    placeable;



var export editinline SpriteComponent VisualizeSprite;

simulated event PostBeginPlay()
{
    SetTickIsDisabled(false);
    //return;    
}

simulated event Tick(float dt)
{
    local int I;
    local float fDistance;
    local XGSquad kSquad;
    local XGUnit kUnit;
	local DynamicVolume containtingVolume;
	local Actor 		curActor;

       
    super.Tick(dt);
   
    if(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle != none)
    {
	
        kSquad = XGBattle_SP(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle).GetHumanPlayer().GetSquad();
      
        if(kSquad != none)
        {
            I = 0;
          
            while(I < kSquad.GetNumMembers())
            {
                kUnit = kSquad.GetMemberAt(I);
                
                 if((!kUnit.IsDead() && !kUnit.m_bOffTheBattlefield) && !kUnit.IsCriticallyWounded())
                {
                   
                    if(class'XComWorldData'.static.GetWorldData().CanSeeActorToLocation(kUnit.GetPawn(), Location))
                    {
					
                        fDistance = float(kUnit.GetSightRadius() * 64);
                        // End:0x41E
                        if(VSizeSq(kUnit.GetLocation() - Location) < (fDistance * fDistance) )
                        {
                            

							foreach class'Engine'.static.GetCurrentWorldInfo().AllActors(class'DynamicVolume', containtingVolume)
							{
								if(containtingVolume.Encompasses(self)) break;
			
							}   
							
							foreach class'Engine'.static.GetCurrentWorldInfo().AllActors(class'Actor', curActor)
							{
								if(
								( containtingVolume.IsOverlapping(curActor) 
								&&(		   curActor.ObjectArchetype.Name == 'ARC_AlienEnergyNode_XLA' 
										|| curActor.ObjectArchetype.Name == 'ARC_AlienBomb_XLA'
										|| curActor.IsA('XComMeldContainerActor')
										)
										
								)  
								||
								( containtingVolume.Encompasses(curActor) 
								&&(		   curActor.ObjectArchetype.Name == 'ARC_Alien_Bomb_Active' 
										|| curActor.ObjectArchetype.Name == 'ARC_Alien_Bomb_Exploding'
										|| curActor.ObjectArchetype.Name == 'ARC_Alien_Bomb_Destroyed'
										|| curActor.ObjectArchetype.Name == 'ARC_Alien_Bomb_Inactive'
										|| curActor.ObjectArchetype.Name == 'ARC_Energy_Node_Active'
										|| curActor.ObjectArchetype.Name == 'ARC_Energy_Node_Inactive')	
								) 
								
								
								)
								{
										curActor.SetHidden(false);
								}
								
			
							}      							
							
							
							SetTickIsDisabled(true);
							break;
						}
                          
        

       
       
                            
                        
						
                    }
					
                }
                ++ I;

            }
        }
		
    }
    //return;    
}

defaultproperties
{
    begin object name=Sprite class=SpriteComponent

    end object 
  
    VisualizeSprite=Sprite
  
  
    Components(0)=Sprite
   
}